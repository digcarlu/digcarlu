#WHILE LOOPS

#Fill in the blanks to make the print_prime_factors function print all the prime factors of a number. A prime factor is a number that is prime and divides another without a
#remainder.
def print_prime_factors(number):
  factor = 2
  while factor <= number:
    if number % factor == 0:
      print(factor)
      number = number / factor
    else:
      factor+=1
  return "Done"
print_prime_factors(100)
# Should print 2,2,5,5

#The following code can lead to an infinite loop. Fix the code so that it can finish successfully for all numbers.
def is_power_of_two(n):
  while n % 2 == 0 and n!=0:
    n = n / 2
  if n == 1:
    return True
  return False
print(is_power_of_two(0)) # Should be False
print(is_power_of_two(1)) # Should be True
print(is_power_of_two(8)) # Should be True
print(is_power_of_two(9)) # Should be False

#Fill in the empty function so that it returns the sum of all the divisors of a number, without including it. A divisor is a number that divides into another without a remainder.
def sum_divisors(n):
  sum = 0
  z = 1
  while n > z:
    if n % z == 0:
      sum = sum + z
      z = z + 1
    else:
      z = z + 1
  return sum
print(sum_divisors(0))
# 0
print(sum_divisors(3)) # Should sum of 1
# 1
print(sum_divisors(36)) # Should sum of 1+2+3+4+6+9+12+18
# 55
print(sum_divisors(102)) # Should be sum of 2+3+6+17+34+51
# 114

#The multiplication_table function prints the results of a number passed to it multiplied by 1 through 5. An additional requirement is that the result is not to exceed 25,
#which is done with the break statement. Fill in the blanks to complete the function to satisfy these conditions.
def multiplication_table(number):
	multiplier = 1
	while multiplier <= 5:
		result = number * multiplier
		if result > 25 :
			break
		print(str(number) + "x" + str(multiplier) + "=" + str(result))
		multiplier += 1
multiplication_table(3) 
# Should print: 3x1=3 3x2=6 3x3=9 3x4=12 3x5=15
multiplication_table(5) 
# Should print: 5x1=5 5x2=10 5x3=15 5x4=20 5x5=25
multiplication_table(8)	
# Should print: 8x1=8 8x2=16 8x3=24

#FOR LOOPS

#Fill in the blanks to make the factorial function return the factorial of n. Then, print the first 10 factorials (from 0 to 9) with the corresponding number. Remember that the
#factorial of a number is defined as the product of an integer and all integers before it. For example, the factorial of five (5!) is equal to 1*2*3*4*5=120. Also recall that
#the factorial of zero (0!) is equal to 1.
def factorial(n):
    result = 1
    for x in range(1,n+1):
        result = result * x
    return result
for n in range(0,10):
    print(n, factorial(n))
 
#Write a script that prints the first 10 cube numbers (x**3), starting with x=1 and ending with x=10.
for x in range(1,11):
  print(x**3)
  
#Write a script that prints the multiples of 7 between 0 and 100. Print one multiple per line and avoid printing any numbers that aren't multiples of 7. Remember that 0 is also
#a multiple of 7.
for x in range (15):
    multiple = 7 * x
    print(multiple)
    
#The retry function tries to execute an operation that might fail, it retries the operation for a number of attempts.  Currently the code will keep executing the function even
#if it succeeds. Fill in the blank so the code stops trying after the operation succeeded.
def retry(operation, attempts):
  for n in range(attempts):
    if operation():
      print("Attempt " + str(n) + " succeeded")
      break
    else:
      print("Attempt " + str(n) + " failed")
retry(create_user, 3)
retry(stop_service, 5)

#RECURSION

#Fill in the blanks to make the is_power_of function return whether the number is a power of the given base. Note: base is assumed to be a positive number. Tip: for functions
#that return a boolean value, you can return the result of a comparison.
def is_power_of(number, base):
  if number < base:
    return number==1
  return is_power_of(number//base,base)
print(is_power_of(8,2)) # Should be True
print(is_power_of(64,4)) # Should be True
print(is_power_of(70,10)) # Should be False

#The count_users function recursively counts the amount of users that belong to a group in the company system, by going through each of the members of a group and if one of
#them is a group, recursively calling the function and counting the members. But it has a bug! Can you spot the problem and fix it?
def count_users(group):
  count = 0
  for member in get_members(group):
        if is_group(member):
           count += count_users(member)
        else:
            count+=1
  return count
print(count_users("sales")) # Should be 3
print(count_users("engineering")) # Should be 8
print(count_users("everyone")) # Should be 18

#Implement the sum_positive_numbers function, as a recursive function that returns the sum of all positive numbers between the number n received and 1. For example, when n is 3
#it should return 1+2+3=6, and when n is 5 it should return 1+2+3+4+5=15.
def sum_positive_numbers(n):
  if n<1:
    return 0
  return n + sum_positive_numbers(n-1)
print(sum_positive_numbers(3)) # Should be 6
print(sum_positive_numbers(5)) # Should be 15

#GRADED ASSESSMENT

#Fill in the blanks of this code to print out the numbers 1 through 7.
number = 1
while number <= 7:
	print(number, end=" ")
	number+=1
  
#The show_letters function should print out each letter of a word on a separate line. Fill in the blanks to make that happen.
def show_letters(word):
	for x in word:
		print(x)
show_letters("Hello")
# Should print one line per letter

#Complete the function digits(n) that returns how many digits the number has. For example: 25 has 2 digits and 144 has 3 digits.
def digits(n):
	count = 0
	if n == 0:
	  return 1
	while (n>0):
		count += 1
		n = n//10
	return count
print(digits(25))   # Should print 2
print(digits(144))  # Should print 3
print(digits(1000)) # Should print 4
print(digits(0))    # Should print 1

#This function prints out a multiplication table (where each number is the result of multiplying the first number of its row by the number at the top of its column). Fill in
#the blanks so that calling multiplication_table(1, 3) will print out:
#1 2 3 
#2 4 6 
#3 6 9
def multiplication_table(start, stop):
	for x in range(start,stop+1):
		for y in range(start,stop+1):
			print(str(x*y), end=" ")
		print()
multiplication_table(1, 3)
# Should print the multiplication table shown above

#The counter function counts down from start to stop when start is bigger than stop, and counts up from start to stop otherwise. Fill in the blanks to make this work correctly.
def counter(start, stop):
	x = start
	if x > stop:
		return_string = "Counting down: "
		while x >= stop:
			return_string += str(x)
			if x != stop:
				return_string += ","
			x-=1
	else:
		return_string = "Counting up: "
		while x <= stop:
			return_string += str(x)
			if x != stop:
				return_string += ","
			x +=1
	return return_string
print(counter(1, 10)) # Should be "Counting up: 1,2,3,4,5,6,7,8,9,10"
print(counter(2, 1)) # Should be "Counting down: 2,1"
print(counter(5, 5)) # Should be "Counting up: 5"

#The even_numbers function returns a space-separated string of all positive numbers that are divisible by 2, up to and including the maximum that's passed into the function.
#For example, even_numbers(6) returns “2 4 6”. Fill in the blank to make this work.
def even_numbers(maximum):
	return_string = ""
	for x in range(2, maximum+1, 2):
		return_string += str(x) + " "
	return return_string.strip()
print(even_numbers(6))  # Should be 2 4 6
print(even_numbers(10)) # Should be 2 4 6 8 10
print(even_numbers(1))  # No numbers displayed
print(even_numbers(3))  # Should be 2
print(even_numbers(0))  # No numbers displayed

#The following code raises an error when executed. What's the reason for the error?
def decade_counter():
	while year < 50:
		year += 10
	return year
