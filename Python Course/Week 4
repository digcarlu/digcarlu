#OBJECT-ORIENTED PROGRAMMING

#Creating new instances of class objects can be a great way to keep track of values using attributes associated with the object. The values of these attributes can be easily
#changed at the object level.  The following code illustrates a famous quote by George Bernard Shaw, using objects to represent people. Fill in the blanks to make the code
#satisfy the behavior described in the quote. 
class Person:
    apples = 0
    ideas = 0
johanna = Person()
johanna.apples = 1
johanna.ideas = 1
martin = Person()
martin.apples = 2
martin.ideas = 1
def exchange_apples(you, me):
    	temp=you.apples
    	you.apples=me.apples
    	me.apples=temp
    	return you.apples, me.apples
def exchange_ideas(you, me):
    you.ideas = me.ideas+you.ideas
    me.ideas =you.ideas
    return you.ideas, me.ideas
exchange_apples(johanna, martin)
print("Johanna has {} apples and Martin has {} apples".format(johanna.apples, martin.apples))
exchange_ideas(johanna, martin)
print("Johanna has {} ideas and Martin has {} ideas".format(johanna.ideas, martin.ideas))

#The City class has the following attributes: name, country (where the city is located), elevation (measured in meters), and population (approximate, according to recent
#statistics). Fill in the blanks of the max_elevation_city function to return the name of the city and its country (separated by a comma), when comparing the 3 defined instances
#for a specified minimal population. For example, calling the function for a minimum population of 1 million: max_elevation_city(1000000) should return "Sofia, Bulgaria". 
class City:
	name = ""
	country = ""
	elevation = 0 
	population = 0
city1 = City()
city1.name = "Cusco"
city1.country = "Peru"
city1.elevation = 3399
city1.population = 358052
city2 = City()
city2.name = "Sofia"
city2.country = "Bulgaria"
city2.elevation = 2290
city2.population = 1241675
city3 = City()
city3.name = "Seoul"
city3.country = "South Korea"
city3.elevation = 38
city3.population = 9733509
def max_elevation_city(min_population):
  highest_elevation=0
  return_city =""
  if (city1.population>min_population):
      if(highest_elevation<city1.elevation):
          highest_elevation=city1.elevation
          return_city = ("{}, {}".format(city1.name,city1.country))
  if(city2.population>min_population):
      if (highest_elevation<city2.elevation):
          highest_elevation=city2.elevation
          return_city = ("{}, {}".format(city2.name,city2.country))
  if(city3.population>min_population):
      if (highest_elevation<city3.elevation):
          highest_elevation=city3.elevation
          return_city = ("{}, {}".format(city3.name,city3.country))
  if return_city!="":
      return return_city
  else:
      return ""
print(max_elevation_city(100000)) # Should print "Cusco, Peru"
print(max_elevation_city(1000000)) # Should print "Sofia, Bulgaria"
print(max_elevation_city(10000000)) # Should print ""

#We have two pieces of furniture: a brown wood table and a red leather couch. Fill in the blanks following the creation of each Furniture class instance, so that the
#describe_furniture function can format a sentence that describes these pieces as follows: "This piece of furniture is made of {color} {material}"
class Furniture:
	color = ""
	material = ""
table = Furniture()
table.color="brown"
table.material="wood"
couch = Furniture()
couch.color="red"
couch.material="leather"
def describe_furniture(piece):
	return ("This piece of furniture is made of {} {}".format(piece.color, piece.material))
print(describe_furniture(table)) 
# Should be "This piece of furniture is made of brown wood"
print(describe_furniture(couch)) 
# Should be "This piece of furniture is made of red leather"
